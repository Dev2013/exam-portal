[{"/Users/shikhar.saxena/Documents/phd-ui/src/index.js":"1","/Users/shikhar.saxena/Documents/phd-ui/src/App.js":"2","/Users/shikhar.saxena/Documents/phd-ui/src/reportWebVitals.js":"3","/Users/shikhar.saxena/Documents/phd-ui/src/interceptors.js":"4","/Users/shikhar.saxena/Documents/phd-ui/src/dashboard.js":"5","/Users/shikhar.saxena/Documents/phd-ui/src/Signup.jsx":"6","/Users/shikhar.saxena/Documents/phd-ui/src/Login.jsx":"7","/Users/shikhar.saxena/Documents/phd-ui/src/Wrapper.jsx":"8","/Users/shikhar.saxena/Documents/phd-ui/src/quiz.js":"9","/Users/shikhar.saxena/Documents/phd-ui/src/lib/Quiz.jsx":"10","/Users/shikhar.saxena/Documents/phd-ui/src/lib/Locale.jsx":"11","/Users/shikhar.saxena/Documents/phd-ui/src/lib/Core.jsx":"12","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/helpers.js":"13","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/InstantFeedback.jsx":"14","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/QuizResultFilter.jsx":"15","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/Explanation.jsx":"16","/Users/shikhar.saxena/Documents/phd-ui/src/Videos.jsx":"17","/Users/shikhar.saxena/Documents/phd-ui/src/constants.js":"18","/Users/shikhar.saxena/Documents/phd-ui/src/Analysis.jsx":"19","/Users/shikhar.saxena/Documents/phd-ui/src/questions .js":"20"},{"size":577,"mtime":1641301865523,"results":"21","hashOfConfig":"22"},{"size":2108,"mtime":1650368344040,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1639991639747,"results":"24","hashOfConfig":"22"},{"size":347,"mtime":1639991639746,"results":"25","hashOfConfig":"22"},{"size":3989,"mtime":1650373360830,"results":"26","hashOfConfig":"22"},{"size":8062,"mtime":1642505309507,"results":"27","hashOfConfig":"22"},{"size":2604,"mtime":1642504980839,"results":"28","hashOfConfig":"22"},{"size":6365,"mtime":1650372966624,"results":"29","hashOfConfig":"22"},{"size":5501,"mtime":1640141204376,"results":"30","hashOfConfig":"22"},{"size":4313,"mtime":1650372815889,"results":"31","hashOfConfig":"22"},{"size":628,"mtime":1639201010000,"results":"32","hashOfConfig":"22"},{"size":13015,"mtime":1641483282400,"results":"33","hashOfConfig":"22"},{"size":4179,"mtime":1640867939863,"results":"34","hashOfConfig":"22"},{"size":1035,"mtime":1639201010000,"results":"35","hashOfConfig":"22"},{"size":506,"mtime":1639201010000,"results":"36","hashOfConfig":"22"},{"size":389,"mtime":1639201010000,"results":"37","hashOfConfig":"22"},{"size":2708,"mtime":1642505384303,"results":"38","hashOfConfig":"22"},{"size":76,"mtime":1650372476044,"results":"39","hashOfConfig":"22"},{"size":6472,"mtime":1642414117093,"results":"40","hashOfConfig":"22"},{"size":20742,"mtime":1650372685800,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"160cjbv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shikhar.saxena/Documents/phd-ui/src/index.js",[],["87","88"],"/Users/shikhar.saxena/Documents/phd-ui/src/App.js",["89"],"/Users/shikhar.saxena/Documents/phd-ui/src/reportWebVitals.js",[],"/Users/shikhar.saxena/Documents/phd-ui/src/interceptors.js",[],"/Users/shikhar.saxena/Documents/phd-ui/src/dashboard.js",[],"/Users/shikhar.saxena/Documents/phd-ui/src/Signup.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/Login.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/Wrapper.jsx",["90"],"/Users/shikhar.saxena/Documents/phd-ui/src/quiz.js",[],["91","92"],"/Users/shikhar.saxena/Documents/phd-ui/src/lib/Quiz.jsx",["93","94"],"/Users/shikhar.saxena/Documents/phd-ui/src/lib/Locale.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/lib/Core.jsx",["95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React, { useState, useEffect, useCallback, Fragment } from \"react\";\nimport QuizResultFilter from \"./core-components/QuizResultFilter\";\nimport { checkAnswer, rawMarkup } from \"./core-components/helpers\";\nimport InstantFeedback from \"./core-components/InstantFeedback\";\nimport Explanation from \"./core-components/Explanation\";\nimport { useStopwatch } from \"react-timer-hook\";\n\nconst Core = function ({\n  questions,\n  appLocale,\n  showDefaultResult,\n  onComplete,\n  customResultPage,\n  showInstantFeedback,\n  continueTillCorrect,\n  onEachQuestionChange,\n  isShowTimer,\n}) {\n  const [incorrectAnswer, setIncorrectAnswer] = useState(false);\n  const [correctAnswer, setCorrectAnswer] = useState(false);\n  const [showNextQuestionButton, setShowNextQuestionButton] = useState(false);\n  const [endQuiz, setEndQuiz] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [buttons, setButtons] = useState({});\n  const [correct, setCorrect] = useState([]);\n  const [incorrect, setIncorrect] = useState([]);\n  const [userInput, setUserInput] = useState([]);\n  const [filteredValue, setFilteredValue] = useState(\"all\");\n  const [userAttempt, setUserAttempt] = useState(1);\n  const [showDefaultResultState, setShowDefaultResult] = useState(true);\n  const [answerSelectionTypeState, setAnswerSelectionType] =\n    useState(undefined);\n\n  const [totalPoints, setTotalPoints] = useState(0);\n  const [correctPoints, setCorrectPoints] = useState(0);\n  const [question, setQuestion] = useState(questions[currentQuestionIndex]);\n  const [questionSummary, setQuestionSummary] = useState(undefined);\n  const [time, setTime] = useState([]);\n  const [nextClicked,setISNextClicked] = useState(0)\n\n\n  const { seconds, minutes, hours, days, reset } = useStopwatch({\n    autoStart: isShowTimer,\n  });\n\n  useEffect(() => {\n    setShowDefaultResult(\n      showDefaultResult !== undefined ? showDefaultResult : true\n    );\n  }, [showDefaultResult]);\n\n  useEffect(() => {\n    setQuestion(questions[currentQuestionIndex]);\n  }, [currentQuestionIndex]);\n\n  useEffect(() => {\n    const { answerSelectionType='single' } = question;\n    // Default single to avoid code breaking due to automatic version upgrade\n    setAnswerSelectionType(answerSelectionType || \"single\");\n  }, [question, currentQuestionIndex]);\n\n  useEffect(() => {\n    if (endQuiz) {\n      let totalPointsTemp = 0;\n      let correctPointsTemp = 0;\n      for (let i = 0; i < questions.length; i += 1) {\n        let point = questions[i].point || 0;\n        if (typeof point === \"string\" || point instanceof String) {\n          point = parseInt(point);\n        }\n\n        totalPointsTemp += point;\n\n        if (correct.includes(i)) {\n          correctPointsTemp += point;\n        }\n      }\n      setTotalPoints(totalPointsTemp);\n      setCorrectPoints(correctPointsTemp);\n    }\n  }, [endQuiz]);\n\n  useEffect(() => {\n    setQuestionSummary({\n      numberOfQuestions: questions.length,\n      numberOfCorrectAnswers: correct.length,\n      numberOfIncorrectAnswers: incorrect.length,\n      questions,\n      userInput,\n      totalPoints,\n      correctPoints,\n      time,\n    });\n  }, [totalPoints, correctPoints, questions, correct.length, incorrect.length, userInput, time]);\n\n  useEffect(() => {\n    if (endQuiz && onComplete !== undefined && questionSummary !== undefined) {\n      onComplete(questionSummary);\n    }\n  }, [endQuiz, questionSummary]);\n\n  const nextQuestion = (currentQuestionIndex) => {\n    setISNextClicked(prev=>prev+1)\n    // setQuestionSummary({);\n    onEachQuestionChange({\n      numberOfQuestions: questions.length,\n      numberOfCorrectAnswers: correct.length,\n      numberOfIncorrectAnswers: incorrect.length,\n      questions,\n      userInput,\n      totalPoints,\n      correctPoints,\n      time\n    });\n    setIncorrectAnswer(false);\n    setCorrectAnswer(false);\n    setShowNextQuestionButton(false);\n    setButtons({});\n\n    if (currentQuestionIndex + 1 === questions.length) {\n      setEndQuiz(true);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const handleChange = (event) => {\n    setFilteredValue(event.target.value);\n  };\n\n  const renderAnswerInResult = (question, userInputIndex) => {\n    const { answers, correctAnswer, questionType } = question;\n    let { answerSelectionType } = question;\n    let answerBtnCorrectClassName;\n    let answerBtnIncorrectClassName;\n\n    // Default single to avoid code breaking due to automatic version upgrade\n    answerSelectionType = answerSelectionType || \"single\";\n\n    return answers.map((answer, index) => {\n      if (answerSelectionType === \"single\") {\n        // correctAnswer - is string\n        answerBtnCorrectClassName =\n          `${JSON.stringify(answer[index + 1])}` ===\n          JSON.stringify(correctAnswer)\n            ? \"correct\"\n            : \"correct\";\n        answerBtnIncorrectClassName =\n          `${JSON.stringify(answer[userInputIndex])}` !==\n            JSON.stringify(correctAnswer) &&\n          `${JSON.stringify(answer[index + 1])}` ===\n            `${JSON.stringify(answer[userInputIndex])}`\n            ? \"correct\"\n            : \"correct\";\n      } else {\n        // correctAnswer - is array of numbers\n        answerBtnCorrectClassName = correctAnswer.includes(index + 1)\n          ? \"correct\"\n          : \"\";\n        answerBtnIncorrectClassName =\n          !correctAnswer.includes(index + 1) &&\n          userInputIndex.includes(index + 1)\n            ? \"correct\"\n            : \"correct\";\n      }\n\n      return (\n        <div key={index}>\n          <button\n            disabled\n            className={`answerBtn btn ${answerBtnCorrectClassName}${answerBtnIncorrectClassName}`}\n          >\n            {questionType === \"text\" && <span>{answer?.choice}</span>}\n            {questionType === \"photo\" && <img src={answer} alt=\"image\" />}\n          </button>\n        </div>\n      );\n    });\n  };\n\n  const renderQuizResultQuestions = useCallback(() => {\n    let filteredQuestions;\n    let filteredUserInput;\n\n    if (filteredValue !== \"all\") {\n      if (filteredValue === \"correct\") {\n        filteredQuestions = questions.filter(\n          (question, index) => correct.indexOf(index) !== -1\n        );\n        filteredUserInput = userInput.filter(\n          (input, index) => correct.indexOf(index) !== -1\n        );\n      } else {\n        filteredQuestions = questions.filter(\n          (question, index) => incorrect.indexOf(index) !== -1\n        );\n        filteredUserInput = userInput.filter(\n          (input, index) => incorrect.indexOf(index) !== -1\n        );\n      }\n    }\n\n    return (filteredQuestions || questions).map((question, index) => {\n      const userInputIndex = filteredUserInput\n        ? filteredUserInput[index]\n        : userInput[index];\n\n      // Default single to avoid code breaking due to automatic version upgrade\n      const answerSelectionType = question.answerSelectionType || \"single\";\n\n      return (\n        <div className=\"result-answer-wrapper\" key={index + 1}>\n          <h3\n            dangerouslySetInnerHTML={rawMarkup(\n              `Q${question.questionIndex}: ${question.question}`\n            )}\n          />\n          {question.questionPic && (\n            <img src={question.questionPic} alt=\"questionPic\" />\n          )}\n          {renderTags(\n            answerSelectionType,\n            question.correctAnswer.length || 1,\n            question.segment\n          )}\n          <div className=\"result-answer\">\n            {renderAnswerInResult(question, userInputIndex)}\n          </div>\n          <Explanation question={question} isResultPage />\n        </div>\n      );\n    });\n  }, [endQuiz, filteredValue]);\n\n  const renderAnswers = (question, buttons) => {\n    const { answers, correctAnswer, questionType } = question;\n    let { answerSelectionType } = question;\n    const onClickAnswer = (index) =>\n      checkAnswer(index, correctAnswer, answerSelectionType, {\n        userInput,\n        questionId: question?.id,\n        userAttempt,\n        currentQuestionIndex,\n        continueTillCorrect,\n        showNextQuestionButton,\n        incorrect,\n        correct,\n        setButtons,\n        setCorrectAnswer,\n        setIncorrectAnswer,\n        setCorrect,\n        setIncorrect,\n        setShowNextQuestionButton,\n        setUserInput,\n        setUserAttempt,\n      });\n\n    // Default single to avoid code breaking due to automatic version upgrade\n    answerSelectionType = answerSelectionType || \"single\";\n\n    return answers.map((answer, index) => (\n      <Fragment key={index}>\n        {buttons[index] !== undefined ? (\n          <button\n            disabled={false}\n            className={`${buttons[index].className} answerBtn btn`}\n            onClick={() => onClickAnswer(answer?.choice)}\n          >\n            {questionType === \"text\" && <span>{answer?.choice}</span>}\n            {questionType === \"photo\" && (\n              <img src={answer?.choice} alt=\"image\" />\n            )}\n          </button>\n        ) : (\n          <button\n            onClick={() => onClickAnswer(answer?.choice)}\n            className=\"answerBtn btn\"\n          >\n            {questionType === \"text\" && answer?.choice}\n            {questionType === \"photo\" && (\n              <img src={answer?.choice} alt=\"image\" />\n            )}\n          </button>\n        )}\n      </Fragment>\n    ));\n  };\n\n  const renderTags = (answerSelectionType, numberOfSelection, segment) => {\n    const {\n      singleSelectionTagText,\n      multipleSelectionTagText,\n      pickNumberOfSelection,\n    } = appLocale;\n\n    return (\n      <div className=\"tag-container\">\n        {answerSelectionType === \"single\" && (\n          <span className=\"single selection-tag\">{singleSelectionTagText}</span>\n        )}\n        {answerSelectionType === \"multiple\" && (\n          <span className=\"multiple selection-tag\">\n            {multipleSelectionTagText}\n          </span>\n        )}\n        <span className=\"number-of-selection\">\n          {pickNumberOfSelection.replace(\n            \"<numberOfSelection>\",\n            numberOfSelection\n          )}\n        </span>\n        {segment && <span className=\"selection-tag segment\">{segment}</span>}\n      </div>\n    );\n  };\n\n  const renderResult = () => (\n    <div className=\"card-body\">\n      <h2>\n        {appLocale.resultPageHeaderText\n          .replace(\"<correctIndexLength>\", correct.length)\n          .replace(\"<questionLength>\", questions.length)}\n      </h2>\n      <h2>\n        {appLocale.resultPagePoint\n          .replace(\"<correctPoints>\", correctPoints)\n          .replace(\"<totalPoints>\", totalPoints)}\n      </h2>\n      <br />\n      <QuizResultFilter\n        filteredValue={filteredValue}\n        handleChange={handleChange}\n        appLocale={appLocale}\n      />\n      {renderQuizResultQuestions()}\n    </div>\n  );\n\n  return (\n    <div className=\"questionWrapper\">\n      {!endQuiz && (\n        <div className=\"questionWrapperBody\">\n          <div className=\"questionModal\">\n            {/* <InstantFeedback\n              question={question}\n              showInstantFeedback={showInstantFeedback}\n              correctAnswer={correctAnswer}\n              incorrectAnswer={incorrectAnswer}\n            /> */}\n          </div>\n          <div>\n            {appLocale.question} {currentQuestionIndex + 1}:\n          </div>\n          <h3\n            dangerouslySetInnerHTML={rawMarkup(question && question.question)}\n          />\n          {question && question.questionPic && (\n            <img src={question.questionPic} alt=\"image\"  width=\"500px\" height=\"500px\" />\n          )}\n          {/* {question && renderTags(answerSelectionTypeState, question.correctAnswer.length, question.segment)} */}\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              height: \"50px\",\n            }}\n          >\n            <span>{days}</span>:<span>{hours}</span>:<span>{minutes}</span>:\n            <span>{seconds}</span>{\" \"}\n          </div>\n          {question && renderAnswers(question, buttons)}\n          {showNextQuestionButton && (\n            <div>\n              <button\n                onClick={() => {\n                  nextQuestion(currentQuestionIndex);\n                  const updatedTime = {\n                    id: question?.id,\n                    time: minutes * 60 + seconds + hours * 3600,\n                  };\n                  const arr = [...time, updatedTime]\n                  setTime(arr);\n                  reset();\n                }}\n                className=\"nextQuestionBtn btn\"\n              >\n                {appLocale.nextQuestionBtn}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n      {endQuiz &&\n        showDefaultResultState &&\n        customResultPage === undefined &&\n        renderResult()}\n      {endQuiz &&\n        !showDefaultResultState &&\n        customResultPage !== undefined &&\n        customResultPage(questionSummary)}\n    </div>\n  );\n};\n\nexport default Core;\n","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/helpers.js",["108"],"import marked from 'marked';\nimport dompurify from 'dompurify';\n\nexport const rawMarkup = (data) => {\n  const sanitizer = dompurify.sanitize;\n  return { __html: (sanitizer(data)) };\n};\n\nexport const checkAnswer = (index, correctAnswer, answerSelectionType, {\n  userInput,\n  userAttempt,\n  questionId,\n  currentQuestionIndex,\n  continueTillCorrect,\n  showNextQuestionButton,\n  incorrect,\n  correct,\n  setButtons,\n  setCorrectAnswer,\n  setIncorrectAnswer,\n  setCorrect,\n  setIncorrect,\n  setShowNextQuestionButton,\n  setUserInput,\n  setUserAttempt,\n}) => {\n  const indexStr = `${index}`;\n  console.log(index, correctAnswer,currentQuestionIndex, indexStr === correctAnswer?.answer,userInput)\n  \n  const disabledAll = {\n    0: { disabled: true },\n    1: { disabled: true },\n    2: { disabled: true },\n    3: { disabled: true },\n  };\n  if (answerSelectionType === 'single') {\n    if (userInput[currentQuestionIndex] === undefined) {\n      userInput.push({id:questionId,ans:index});\n    }\n\n    if (indexStr === correctAnswer?.answer) {\n      if (incorrect.indexOf(currentQuestionIndex) < 0 && correct.indexOf(currentQuestionIndex) < 0) {\n        correct.push(currentQuestionIndex);\n      }\n\n      setButtons((prevState) => ({\n        ...prevState,\n        ...disabledAll,\n        [index - 1]: {\n          className: (indexStr === correctAnswer) ? 'correct' : 'correct ',\n        },\n      }));\n\n      setCorrectAnswer(true);\n      setIncorrectAnswer(false);\n      setCorrect(correct);\n      setShowNextQuestionButton(true);\n    } else {\n      if (correct.indexOf(currentQuestionIndex) < 0 && incorrect.indexOf(currentQuestionIndex) < 0) {\n        incorrect.push(currentQuestionIndex);\n      }\n\n      if (continueTillCorrect) {\n        setButtons((prevState) => (\n          {\n\n            ...prevState,\n            [index - 1]: {\n              disabled: !prevState[index - 1],\n            },\n          }\n        ));\n      } else {\n        setButtons((prevState) => (\n          {\n\n            ...prevState,\n            ...disabledAll,\n            [index - 1]: {\n              className: (indexStr === correctAnswer) ? 'correct' : 'correct',\n            },\n          }\n        ));\n\n        setShowNextQuestionButton(true);\n      }\n\n      setIncorrectAnswer(true);\n      setCorrectAnswer(false);\n      setIncorrect(incorrect);\n    }\n  } else {\n    const maxNumberOfMultipleSelection = correctAnswer.length;\n\n    if (userInput[currentQuestionIndex] === undefined) {\n      userInput[currentQuestionIndex] = [];\n    }\n\n    if (userInput[currentQuestionIndex].length < maxNumberOfMultipleSelection) {\n      userInput[questionId]= index;\n\n      if (correctAnswer.includes(index)) {\n        if (userInput[currentQuestionIndex].length <= maxNumberOfMultipleSelection) {\n          setButtons((prevState) => ({\n            ...prevState,\n            [index - 1]: {\n              disabled: !prevState[index - 1],\n              className: (correctAnswer.includes(index)) ? 'correct' : 'correct',\n            },\n          }));\n        }\n      } else if (userInput[currentQuestionIndex].length <= maxNumberOfMultipleSelection) {\n        setButtons((prevState) => ({\n          ...prevState,\n          [index - 1]: {\n            className: (correctAnswer.includes(index)) ? 'correct' : 'correct',\n          },\n        }));\n      }\n    }\n\n    if (maxNumberOfMultipleSelection === userAttempt) {\n      let cnt = 0;\n      for (let i = 0; i < correctAnswer.length; i += 1) {\n        if (userInput[currentQuestionIndex].includes(correctAnswer[i])) {\n          cnt += 1;\n        }\n      }\n\n      if (cnt === maxNumberOfMultipleSelection) {\n        correct.push(currentQuestionIndex);\n\n        setCorrectAnswer(true);\n        setIncorrectAnswer(false);\n        setCorrect(correct);\n        setShowNextQuestionButton(true);\n        setUserAttempt(1);\n      } else {\n        incorrect.push(currentQuestionIndex);\n\n        setIncorrectAnswer(true);\n        setCorrectAnswer(false);\n        setIncorrect(incorrect);\n        setShowNextQuestionButton(true);\n        setUserAttempt(1);\n      }\n    } else if (!showNextQuestionButton) {\n      setUserInput(userInput);\n      setUserAttempt(userAttempt + 1);\n    }\n  }\n};\n","/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/InstantFeedback.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/QuizResultFilter.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/lib/core-components/Explanation.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/Videos.jsx",[],"/Users/shikhar.saxena/Documents/phd-ui/src/constants.js",[],"/Users/shikhar.saxena/Documents/phd-ui/src/Analysis.jsx",["109","110","111","112","113"],"import React, { useEffect, useState } from \"react\";\nimport { Doughnut, Bar } from \"../node_modules/react-chartjs-2\";\n// import ModalHeader from 'react-bootstrap/ModalHeader'\n// import ModalTitle from 'react-bootstrap/ModalTitle'\n// import ModalFooter from 'react-bootstrap/ModalFooter'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n} from \"chart.js\";\nimport { baseURL } from \"./constants\";\nimport { useHistory ,Redirect } from 'react-router-dom';\n\nexport const Analysis = ({isAuthorized}) => {\n  const [finalState, setFinalState] = useState({ data: {}, loading: true });\n  const [show, setShow] = useState(false);\n  const history = useHistory()\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  useEffect(() => {\n    fetch(`${baseURL}/get-analytics-data`, {\n      // Adding method type\n      method: \"Get\",\n\n      // Adding body or contents to send\n\n      // Adding headers to the request\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n        Authorization: `Bearer ${sessionStorage.getItem(\"token\")}`,\n      },\n    })\n      .then((r) => {\n        if (r.status === 422) {\n          //   setShowAlert(true)\n        }\n\n        return r.json();\n      })\n      .then((r) => {\n        console.log(r);\n        if (r) {\n          setFinalState({ data: r, loading: false, attempt: r.attempt });\n        }\n      });\n  }, []);\n  const [showModal,setShowModal] = useState(false)\n  const {\n    module1categoryWiseAnalysis = {},\n    module1totalQuestionAnalysis = {},\n    module2Attempt1CategoryWiseAnalysis = {},\n    module2Attempt1TotalQuestionAnalysis = {},\n    module2Attempt2CategoryWiseAnalysis = {},\n    module2Attempt2TotalQuestionAnalysis = {},\n  } = finalState.data;\n  ChartJS.register(\n    ArcElement,\n    Tooltip,\n    Legend,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title\n  );\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart\",\n      },\n    },\n  };\n  const CreateBarData = (value = {}) => {\n    console.log(value);\n    return {\n      labels: Object.keys(value),\n      datasets: [\n        {\n          label: \"correct\",\n          data: Object.values(value)?.map((val) =>\n            Object.keys(val)\n              ?.map((val1) => {\n                if (val1 === \"correct\") {\n                  return val[val1];\n                }\n              })\n              .filter((val) => !!val)\n          ),\n          backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n        },\n        {\n          label: \"incorrect\",\n          data: Object.values(value)?.map((val) =>\n            Object.keys(val)\n              ?.map((val1) => {\n                if (val1 === \"inCorrect\") {\n                  return val[val1];\n                }\n              })\n              .filter((val) => val)\n          ),\n          backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n        },\n      ],\n    };\n  };\n  const createDataset1 = (value = {}) => {\n    return {\n      labels: Object.keys(value),\n      datasets: [\n        {\n          label: \"# of Votes\",\n          data: Object.values(value),\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n            \"rgba(255, 206, 86, 0.2)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(153, 102, 255, 0.2)\",\n            \"rgba(255, 159, 64, 0.2)\",\n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(255, 159, 64, 1)\",\n          ],\n          borderWidth: 1,\n        },\n      ],\n    };\n  };\n  console.log(CreateBarData(module1categoryWiseAnalysis));\n  return (\n      <>\n       {!isAuthorized? <Redirect to=\"/sign-in\" />:\n    !finalState.loading && (\n        <>\n         {/* <div style={{width:\"100%\",backgroundImage:`url(/4.jpg)`,backgroundColor:\"white\",height:\"calc(100% - 50px)\"}}> */}\n      <div\n        style={{\n          backgroundColor: \"white\",\n          marginTop: \"80px\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          flexWrap: \"wrap\",\n        }}\n      >\n          <div style={{width: \"100%\",display: \"flex\",justifyContent: \"flex-end\",padding:\"15px\"}}><button type=\"button\" className=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" onClick={handleShow}>Help?</button></div>\n       <div style={{width:\"90%\", height:\"auto\",display:\"flex\", alignItems:\"center\"}}> <div style={{width: \"50%\"}}><Doughnut data={createDataset1(module1totalQuestionAnalysis)} options={options} /></div>\n        <div style={{width: \"50%\",height:\"90%\"}}><Bar\n          options={options}\n          data={CreateBarData(module1categoryWiseAnalysis)}\n        /></div>\n        </div>\n        <div style={{width:\"90%\", height:\"auto\",display:\"flex\", alignItems:\"center\"}}><div style={{width: \"50%\", height:\"90%\" }}><Bar\n          options={options}\n          data={CreateBarData(module2Attempt1CategoryWiseAnalysis)}\n        /></div>\n       <div style={{width: \"50%\", height:\"90%\"}}><Doughnut data={createDataset1(module2Attempt1TotalQuestionAnalysis)} /></div>\n       </div>\n       <div style={{width:\"90%\", height:\"auto\",display:\"flex\", alignItems:\"center\"}}>\n         <div style={{width: \"50%\", height:\"90%\"}}><Doughnut data={createDataset1(module2Attempt2TotalQuestionAnalysis)} /></div>\n       <div style={{width: \"50%\", height:\"90%\"}}><Bar\n          options={options}\n          data={CreateBarData(module2Attempt2CategoryWiseAnalysis)}\n        /></div>\n        </div>\n      </div>\n      {/* </div> */}\n    \n   <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </>\n    )\n}\n    </>\n    \n  );\n};\n","/Users/shikhar.saxena/Documents/phd-ui/src/questions .js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":35,"column":60,"nodeType":"120","endLine":35,"endColumn":103},{"ruleId":"121","severity":1,"message":"122","line":119,"column":6,"nodeType":"123","endLine":119,"endColumn":18,"suggestions":"124"},{"ruleId":"114","replacedBy":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"127","line":22,"column":6,"nodeType":"123","endLine":22,"endColumn":8,"suggestions":"128"},{"ruleId":"121","severity":1,"message":"129","line":36,"column":6,"nodeType":"123","endLine":36,"endColumn":13,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":23},{"ruleId":"131","severity":1,"message":"135","line":19,"column":10,"nodeType":"133","messageId":"134","endLine":19,"endColumn":25},{"ruleId":"131","severity":1,"message":"136","line":20,"column":10,"nodeType":"133","messageId":"134","endLine":20,"endColumn":23},{"ruleId":"131","severity":1,"message":"137","line":31,"column":10,"nodeType":"133","messageId":"134","endLine":31,"endColumn":34},{"ruleId":"131","severity":1,"message":"138","line":39,"column":10,"nodeType":"133","messageId":"134","endLine":39,"endColumn":21},{"ruleId":"121","severity":1,"message":"139","line":54,"column":6,"nodeType":"123","endLine":54,"endColumn":28,"suggestions":"140"},{"ruleId":"121","severity":1,"message":"141","line":81,"column":6,"nodeType":"123","endLine":81,"endColumn":15,"suggestions":"142"},{"ruleId":"121","severity":1,"message":"143","line":100,"column":6,"nodeType":"123","endLine":100,"endColumn":32,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":174,"column":42,"nodeType":"120","endLine":174,"endColumn":74},{"ruleId":"121","severity":1,"message":"147","line":233,"column":6,"nodeType":"123","endLine":233,"endColumn":30,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"146","line":271,"column":15,"nodeType":"120","endLine":271,"endColumn":55},{"ruleId":"145","severity":1,"message":"146","line":281,"column":15,"nodeType":"120","endLine":281,"endColumn":55},{"ruleId":"145","severity":1,"message":"146","line":358,"column":13,"nodeType":"120","endLine":358,"endColumn":89},{"ruleId":"131","severity":1,"message":"149","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":14},{"ruleId":"131","severity":1,"message":"150","line":24,"column":9,"nodeType":"133","messageId":"134","endLine":24,"endColumn":16},{"ruleId":"131","severity":1,"message":"151","line":56,"column":10,"nodeType":"133","messageId":"134","endLine":56,"endColumn":19},{"ruleId":"131","severity":1,"message":"152","line":56,"column":20,"nodeType":"133","messageId":"134","endLine":56,"endColumn":32},{"ruleId":"153","severity":1,"message":"154","line":95,"column":28,"nodeType":"155","messageId":"156","endLine":95,"endColumn":30},{"ruleId":"153","severity":1,"message":"154","line":108,"column":28,"nodeType":"155","messageId":"156","endLine":108,"endColumn":30},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["159"],["157"],["158"],"React Hook useCallback has a missing dependency: 'nrOfQuestions'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has missing dependencies: 'nrOfQuestions', 'questions', 'quiz.questions', 'shuffle', and 'shuffleQuestions'. Either include them or remove the dependency array. You can also do a functional update 'setQuestions(q => ...)' if you only need 'questions' in the 'setQuestions' call.",["161"],"no-unused-vars","'InstantFeedback' is defined but never used.","Identifier","unusedVar","'incorrectAnswer' is assigned a value but never used.","'correctAnswer' is assigned a value but never used.","'answerSelectionTypeState' is assigned a value but never used.","'nextClicked' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'questions'. Either include it or remove the dependency array. If 'setQuestion' needs the current value of 'questions', you can also switch to useReducer instead of useState and read 'questions' in the reducer.",["162"],"React Hook useEffect has missing dependencies: 'correct' and 'questions'. Either include them or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'onComplete'. Either include it or remove the dependency array. If 'onComplete' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["164"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useCallback has missing dependencies: 'correct', 'incorrect', 'questions', 'renderTags', and 'userInput'. Either include them or remove the dependency array.",["165"],"'marked' is defined but never used.","'history' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [id, quizResult]",{"range":"180","text":"181"},"Update the dependencies array to be: [nrOfQuestions]",{"range":"182","text":"183"},"Update the dependencies array to be: [nrOfQuestions, questions, quiz.questions, shuffle, shuffleQuestions, start]",{"range":"184","text":"185"},"Update the dependencies array to be: [currentQuestionIndex, questions]",{"range":"186","text":"187"},"Update the dependencies array to be: [correct, endQuiz, questions]",{"range":"188","text":"189"},"Update the dependencies array to be: [endQuiz, onComplete, questionSummary]",{"range":"190","text":"191"},"Update the dependencies array to be: [correct, filteredValue, incorrect, questions, renderTags, userInput]",{"range":"192","text":"193"},[3196,3208],"[id, quizResult]",[838,840],"[nrOfQuestions]",[1159,1166],"[nrOfQuestions, questions, quiz.questions, shuffle, shuffleQuestions, start]",[2042,2064],"[currentQuestionIndex, questions]",[2858,2867],"[correct, endQuiz, questions]",[3394,3420],"[endQuiz, onComplete, questionSummary]",[7641,7665],"[correct, filteredValue, incorrect, questions, renderTags, userInput]"]